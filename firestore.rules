rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }

    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && 
                      isValidEmail(request.resource.data.email) &&
                      request.resource.data.walletBalance >= 0 &&
                      request.resource.data.savingsBalance >= 0;
      allow delete: if false; // Prevent user deletion via client
    }

    // Transactions collection - users can only read their own transactions
    // Writes should be handled server-side for security
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.uid);
      allow create: if isAuthenticated() && isOwner(request.resource.data.uid) &&
                      request.resource.data.amount > 0 &&
                      request.resource.data.uid == request.auth.uid;
      allow update, delete: if false; // Transactions should be immutable
    }

    // Savings accounts collection - users can manage their own savings
    match /savingsAccounts/{savingsId} {
      allow read, create, update: if isAuthenticated() && isOwner(resource.data.uid);
      allow delete: if false; // Prevent deletion, only status updates
    }

    // Loans collection - users can manage their own loans
    match /loans/{loanId} {
      allow read, create, update: if isAuthenticated() && isOwner(resource.data.uid);
      allow delete: if false; // Prevent deletion, only status updates
    }

    // Admin wallet - only accessible by administrators
    match /admin_wallet/{walletId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // Revenue records - only accessible by administrators
    match /revenue_records/{recordId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated() && 
                      request.resource.data.amount != null &&
                      request.resource.data.sourceUserId != null;
      allow update, delete: if false; // Revenue records should be immutable
    }

    // Platform stats - only accessible by administrators
    match /platform_stats/{statsId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // Security audit logs - admin read only
    match /security_logs/{logId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated(); // Allow users to create security logs
      allow update, delete: if false;
    }

    // Test collection for connection checks
    match /test/{testId} {
      allow read: if true; // Allow connection tests
      allow write: if false;
    }

    // Default deny rule for all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}